@page "/"
@page "/chat/{chatId?}"
@layout PlantLayout
@inject ISnackbar Snackbar
@inject IChatService ChatService
@inject HybridScrollService ScrollService
@implements IDisposable

<PageTitle>Chat</PageTitle>
<MudStack Spacing="0"
          Style="height: calc(100vh - 64px);"
          Justify="Justify.Center"
          AlignItems="AlignItems.Stretch"
          StretchItems="StretchItems.Start">
    <MudPaper id="messages-container" Outlined="true" Class="rounded-0 overflow-y-auto flex-grow-1">
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-3">
            <MudStack Spacing="2">
                @if (ChatService.CurrentChat?.Messages.Count == 0)
                {
                    <BotMessageComponent Message="Hello! I'm PlantDoc, your AI plant care assistant. I can help you identify plants, diagnose problems, and provide care tips. How can I help you today?"/>
                }
                else
                {
                    @foreach (var message in ChatService.CurrentChat?.Messages ?? new())
                    {
                        @if (message.Sender == SenderType.Bot)
                        {
                            <BotMessageComponent Message="@message.Text"/>
                        }
                        else
                        {
                            <UserMessageComponent Message="@message.Text"/>
                        }
                    }
                }

                @if (ChatService.IsBotTyping)
                {
                    <BotMessageComponent IsLoading="true"/>
                }
            </MudStack>
        </MudContainer>
    </MudPaper>

    <MudPaper Outlined="true" Class="rounded-0">
        <MudStack Row="true" Justify="Justify.Center" StretchItems="StretchItems.End">
            <MudIconButton Icon="@Icons.Material.Filled.AttachFile"
                           Disabled="@(_isInputDisabled || ChatService.IsBotTyping)"/>
            <MudIconButton Icon="@Icons.Material.Filled.CameraAlt"
                           Disabled="@(_isInputDisabled || ChatService.IsBotTyping)"/>

            <MudTextField @bind-Value="TextValue"
                          OnKeyDown="@OnKeyDownHandler"
                          Margin="Margin.Normal"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Send"
                          AdornmentColor="Color.Default"
                          Placeholder="Ask PlantDoc about your plant..."
                          OnAdornmentClick="SendMessage"
                          AdornmentAriaLabel="Send"
                          Variant="Variant.Outlined"
                          Class="mr-3"
                          Disabled="@(_isInputDisabled || ChatService.IsBotTyping)"
                          Immediate="true"/>
        </MudStack>
    </MudPaper>
</MudStack>

@code {
    [Parameter]
    public string? ChatId { get; set; }
    private string TextValue { get; set; } = string.Empty;
    private bool _isInputDisabled = false;

    protected override async Task OnInitializedAsync()
    {
        ChatService.OnChange += async () =>
        {
            if (!ChatService.IsBotTyping)
            {
                _isInputDisabled = false;
            }
            await InvokeAsync(StateHasChanged);
        };

        if (!string.IsNullOrEmpty(ChatId))
        {
            await ChatService.LoadChatAsync(ChatId);
        }
        else
        {
            await ChatService.CreateNewChatAsync();
        }
    }

    protected override void OnInitialized()
    {
        ChatService.OnChange += async () =>
        {
            if (!ChatService.IsBotTyping)
            {
                _isInputDisabled = false;
            }
            await InvokeAsync(StateHasChanged);
        };
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollService.ScrollToBottom("messages-container");
    }

    private async Task OnKeyDownHandler(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(TextValue))
        {
            Snackbar.Add("Please enter a message", Severity.Warning);
            return;
        }

        try
        {
            _isInputDisabled = true;
            var messageToSend = TextValue;
            TextValue = string.Empty; // Clear before sending to avoid race conditions
            await InvokeAsync(StateHasChanged); // Update UI immediately

            await ChatService.SendMessageAsync(messageToSend);
            await ScrollService.ScrollToBottom("messages-container");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error sending message: {ex.Message}", Severity.Error);
            _isInputDisabled = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ButtonTestClick()
    {
        await SendMessage();
    }

    public void Dispose()
    {
        ChatService.OnChange -= StateHasChanged;
        GC.SuppressFinalize(this);
    }
}